/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    // AsciiDoctor (doc)
    id 'org.asciidoctor.jvm.pdf' version '3.2.0'
    id 'org.asciidoctor.jvm.gems' version '3.2.0'

    //Sonar
    id "org.sonarqube" version "3.0"

    //Coveralls
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

group ='com.smartmapper'
version '1.0-beta.1'

// plugin to get the version of the project
// from https://stackoverflow.com/questions/13198358/how-to-get-project-version-in-custom-gradle-plugin
// uses version in build.gradle file
class VersionPlugin implements Plugin<Project> {
    public void apply(Project project) {
        project.task('version') {
            project.gradle.projectsEvaluated {
                println "$project.version"
            }
        }
    }
}

apply plugin: 'application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: VersionPlugin


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    ruby.gems()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
   
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("com.h2database:h2:1.4.191")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compileOnly('org.projectlombok:lombok')

    asciidoctorGems 'rubygems:rouge:3.15.0'
}

asciidoctorPdf {
//   dependsOn asciidoctorGemsPrepare

  baseDirFollowsSourceFile()

  asciidoctorj {
    requires 'rouge'
    attributes 'build-gradle': file('build.gradle'),
        'sourcedir': project.sourceSets.main.java.srcDirs[0],
        'outputDir': file("${buildDir}/docs"),
        'endpoint-url': 'http://example.org',
        'source-highlighter': 'rouge',
        //'imagesdir': './images',
        'toc': 'left',
        'icons': 'font',
        'idprefix': '',
        'idseparator': '-'
  }
}
// alias
task asciidoctor(dependsOn: asciidoctorPdf)


sonarqube {
    properties {
        property "sonar.projectKey", "smartmapperproject_SmartMapperBackend"
    }
}

jacoco {
  reportsDir = file("${buildDir}/reports/jacoco") // this is the default
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/jacocoHtml")
    }
}

coveralls {
    saveAsFile = true
    sendToCoveralls = false
}

application {
    // Define the main class for the application.
    mainClassName = 'com.smartmapper.AppMain'
}


jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

sonarqube {
  properties {
    property "sonar.projectKey", "smartmapperproject_SmartMapperBackend"
    property "sonar.organization", "smartmapperproject"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}